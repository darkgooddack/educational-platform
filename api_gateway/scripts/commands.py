import subprocess
import uvicorn
import time
import socket
from typing import Optional

def find_free_port(start_port: int = 8000) -> int:
    """–ò—â–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
    port = start_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤! –ê—Ö—É–µ—Ç—å!")

def check_rabbitmq():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RabbitMQ"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    for _ in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫
        try:
            sock.connect(('localhost', 5672))
            sock.close()
            return True
        except:
            print("–ñ–¥—ë–º RabbitMQ...")
            subprocess.run(["net", "start", "RabbitMQ"])
            time.sleep(2)
    return False

def dev(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """
    if not check_rabbitmq():
        print("üî¥ RabbitMQ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("net start RabbitMQ")
        return

    print("üü¢ RabbitMQ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=port,
        reload=True
    )

def serve(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç uvicorn —Å–µ—Ä–≤–µ—Ä

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """
    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    subprocess.run([
        "uvicorn",
        "app.main:app",
        "--host", "0.0.0.0",
        "--port", "8000",
        "--proxy-headers",
        "--forwarded-allow-ips=*"
    ], check=True)

def migrate():
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π.
    """
    subprocess.run(["alembic", "upgrade", "head"], check=True)

def rollback():
    """
    –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π.
    """
    subprocess.run(["alembic", "downgrade", "head"], check=True)

def create_migration(name: str):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.
    """
    subprocess.run(["alembic", "revision", "--autogenerate", "-m", name], check=True)

def lint():
    """
    –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞.
    """
    subprocess.run(["black", "app/"], check=True)
    subprocess.run(["isort", "app/"], check=True)
    subprocess.run(["flake8", "app/"], check=True)
    subprocess.run(["mypy", "app/"], check=True)

def format():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
    """
    subprocess.run(["black", "app/"], check=True)
    subprocess.run(["isort", "app/"], check=True)

def check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞.
    """
    subprocess.run(["flake8", "app/"], check=True)
    subprocess.run(["mypy", "app/"], check=True)

def test():
    """
    –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
    """
    subprocess.run(["pytest", "tests/", "-v"], check=True)

def start_all():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–µ—Ä"""
    migrate()
    serve()