"""
–ú–æ–¥—É–ª—å –¥–ª—è OAuth2 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:
- VK 
- Google
- Yandex

–ü—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
1. –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
3. –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ access token
4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
5. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ auth-service

TODO:
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:
- VK: https://vk.com/dev
- Google: https://console.cloud.google.com
- Yandex: https://oauth.yandex.ru

2. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ id –∏ secret –≤ env

3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å redirect_uri –≤ –ª–∏—á–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, —É–∫–∞–∑–∞–≤ URL –≤–∏–¥–∞:
https://{domain.ru}/api/v1/oauth/{provider}/callback

4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å

"""
import json
import logging
from aio_pika import Connection, Message
from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import RedirectResponse
import aiohttp
from typing import Annotated
from app.core.dependencies import get_redis, get_rabbitmq
from app.core.config import config
from app.schemas import OAuthResponse
from redis import Redis

router = APIRouter(prefix="/oauth", tags=["oauth"])


@router.get("/{provider}", response_class=RedirectResponse)
async def oauth_login(provider: str) -> RedirectResponse:
    """
    –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    
    Args:
        provider (str): –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (vk/google/yandex)
        
    Returns:
        RedirectResponse: –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    """
    
    logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥:")
    logging.info("–ü—Ä–æ–≤–∞–π–¥–µ—Ä: %s", provider)
    logging.info("–ö–æ–Ω—Ñ–∏–≥ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: %s", json.dumps(config.oauth_providers, indent=2, ensure_ascii=False))
    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: %s", json.dumps(config.oauth_providers.get(provider, {}), indent=2, ensure_ascii=False))

    if provider not in config.oauth_providers:
        raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
    
    provider_config = config.oauth_providers[provider]
    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: %s", json.dumps(provider_config, indent=2, ensure_ascii=False))
    
    required_fields = ["client_id", "client_secret", "auth_url", "token_url", "user_info_url", "scope"]
    missing = [field for field in required_fields if field not in provider_config]

    if missing:
        raise HTTPException(
            status_code=500,
            detail=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join(missing)}"
        )
    
    params = {
        "client_id": provider_config["client_id"],
        "redirect_uri": f"{config.app_url}/api/v1/oauth/{provider}/callback",
        "scope": provider_config["scope"],
        "response_type": "code"
    }
    
    auth_url = f"{config.oauth_providers[provider]['auth_url']}?{'&'.join(f'{k}={v}' for k,v in params.items())}"
    return RedirectResponse(auth_url)

@router.get("/{provider}/callback", response_model=OAuthResponse)
async def oauth_callback(
    provider: str,
    code: str,
    redis: Annotated[Redis, Depends(get_redis)],
    rabbitmq: Annotated[Connection, Depends(get_rabbitmq)]
) -> OAuthResponse:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
    
    Args:
        provider (str): –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        code (str): –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        redis: Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        rabbitmq: RabbitMQ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å auth-service
        
    Returns:
        OAuthResponse: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
    Raises:
        HTTPException: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    logging.info("OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä: %s", provider)
    logging.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: %s", list(config.oauth_providers.keys()))

    if provider not in config.oauth_providers:
        raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ access token
    provider_data = config.oauth_providers[provider]
    token_params = {
        "client_id": config.oauth_providers[provider]["client_id"],
        "client_secret": config.oauth_providers[provider]["client_secret"],
        "code": code,
        "redirect_uri": f"{config.app_url}/api/v1/oauth/{provider}/callback",
        "grant_type": "authorization_code"
    }

    async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        async with session.post(config.oauth_providers[provider]["token_url"], data=token_params) as resp:
            token_data = await resp.json()
            if "error" in token_data:
                raise HTTPException(status_code=400, detail=token_data["error"])
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        headers = {"Authorization": f"Bearer {token_data['access_token']}"}
        async with session.get(config.oauth_providers[provider]["user_info_url"], headers=headers) as resp:
            user_data = await resp.json()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ auth-service
    async with rabbitmq.channel() as channel:
        queue = await channel.declare_queue("auth_queue")
        await channel.default_exchange.publish(
            Message(
                body=json.dumps({
                    "action": "oauth_authenticate",
                    "provider": provider,
                    "user_data": user_data
                }).encode()
            ),
            routing_key="auth_queue"
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç auth-service
        async with queue.iterator() as queue_iter:
            async for message in queue_iter:
                async with message.process():
                    response_data = json.loads(message.body.decode())
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ö–µ–º—É
                    oauth_response = OAuthResponse(
                        access_token=response_data["access_token"],
                        token_type="bearer",
                        provider=provider,
                        email=user_data["email"]
                    )

                    if oauth_response.access_token:
                        redis.setex(
                            f"token:{oauth_response.access_token}",
                            3600,
                            oauth_response.email
                        )

                    return oauth_response
