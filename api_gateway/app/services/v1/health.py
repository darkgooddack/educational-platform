"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –∑–¥–æ—Ä–æ–≤—å—è
"""

import logging
from typing import Tuple

from aio_pika import Connection
from starlette.responses import Response

from app.core.messaging.health import HealthMessageProducer
from app.schemas.v1.health import HealthStatusCodes

logger = logging.getLogger(__name__)


class HealthService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã.

    Attributes:
        redis (Redis): –û–±—ä–µ–∫—Ç Redis –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.

    Methods:
        check_redis(redis) -> Tuple[bool, str]: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Redis
        check_services(rabbitmq: Connection) -> Tuple[bool, str]: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
        check_health(redis, rabbitmq: Connection) -> Response: –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    """

    async def check_redis(self, redis) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Redis

        Args:
            redis (Redis): –û–±—ä–µ–∫—Ç Redis –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.

        Returns:
            Tuple[bool, str]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).
        """
        try:
            redis.ping()
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –ø—Ä–æ–π–¥–µ–Ω–∞")
            return True, "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
        except Exception as e:
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: %s", str(e))
            return False, f"–û—à–∏–±–∫–∞ Redis: {str(e)}"

    async def check_services(self, rabbitmq: Connection) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤

        Args:
            rabbitmq (Connection): –û–±—ä–µ–∫—Ç RabbitMQ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.

        Returns:
            Tuple[bool, str]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å).
        """
        try:
            async with rabbitmq.channel() as channel:
                producer = HealthMessageProducer(channel)
                is_healthy, status = await producer.check_health()

                if is_healthy:
                    logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞")
                    return True, "–°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç"

                logger.warning("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: %s", status.value)
                return False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {status.value}"
        except Exception as e:
            logger.error("üíÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: %s", str(e))
            return False, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}"

    async def check_health(self, redis, rabbitmq: Connection) -> Response:
        """
        –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

        Args:
            redis (Redis): –û–±—ä–µ–∫—Ç Redis –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
            rabbitmq (Connection): –û–±—ä–µ–∫—Ç RabbitMQ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.

        Returns:
            Response: –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è.
        """
        redis_ok, redis_msg = await self.check_redis(redis)
        services_ok, services_msg = await self.check_services(rabbitmq)

        if redis_ok and services_ok:
            return Response(status_code=HealthStatusCodes.OK.value)

        logger.error(
            "üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: Redis: %s, –°–µ—Ä–≤–∏—Å—ã: %s",
            redis_msg,
            services_msg,
        )
        return Response(
            status_code=(
                HealthStatusCodes.SERVICE_UNAVAILABLE.value
                if "timeout" in services_msg or "connection" in services_msg
                else HealthStatusCodes.INTERNAL_ERROR.value
            )
        )
