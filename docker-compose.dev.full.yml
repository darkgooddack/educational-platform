version: "3.8"

services:
  backend:
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - ./.env.dev
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
      - RABBITMQ_DEFAULT_VHOST=/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dev-network
  pgadmin:
    image: dpage/pgadmin4:8.12.0
    env_file:
      - ./.env.dev
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-network
  redis-commander:
    image: rediscommander/redis-commander:latest
    env_file:
      - ./.env.dev
    ports:
      - "8081:8081"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dev-network
  postgres:
    image: postgres:16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    env_file:
      - ./.env.dev
    networks:
      - dev-network
  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "6380:6379"
    command: redis-server --requirepass ${REDIS_AUTH_PASSWORD:-default}
    networks:
      - dev-network
  loki:
    user: "root"
    container_name: loki_container
    build: ./monitoring/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - dev-network
  promtail:
    user: "root"
    container_name: promtail_container
    build: ./monitoring/promtail
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail/config.yaml:/etc/promtail/config.yaml
    ports:
      - "9080:9080"
    depends_on:
      loki:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-S", "http://localhost:9080/ready"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - dev-network
  grafana:
    user: "root"
    container_name: grafana_container
    build: ./monitoring/grafana
    ports:
      - "3334:3000"
    env_file:
      - ./.env.dev
    environment:
      - GF_METRICS_USERNAME=${GF_METRICS_USERNAME}
      - GF_METRICS_PASSWORD=${GF_METRICS_PASSWORD}
    volumes:
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge
volumes:
  postgres-data:
  redis-data:
  pgadmin-data:
  grafana-data:
  loki-data: