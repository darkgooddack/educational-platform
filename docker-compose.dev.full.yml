version: "3.8"

services:
  backend:
    build:
      context: ./
      dockerfile: Dockerfile
    env_file:
      - ./.env.dev
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
      - RABBITMQ_DEFAULT_VHOST=/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dev-network
  pgadmin:
    image: dpage/pgadmin4:8.12.0
    env_file:
      - ./.env.dev
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-network
  redis-commander:
    image: rediscommander/redis-commander:latest
    env_file:
      - ./.env.dev
    ports:
      - "8081:8081"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dev-network
  postgres:
    image: postgres:16
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5434:5432"
    env_file:
      - ./.env.dev
    networks:
      - dev-network
  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "6380:6379"
    command: redis-server --requirepass ${REDIS_AUTH_PASSWORD:-default}
    networks:
      - dev-network
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - dev-network
  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - /var/log/app.log:/var/log
      - ./monitoring/promtail/promtail.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - dev-network
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3333:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    networks:
      - dev-network
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana

networks:
  dev-network:
    driver: bridge
volumes:
  pgadmin-data:
  grafana-data: