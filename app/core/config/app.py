"""
–ú–æ–¥—É–ª—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.
"""
import os
from pathlib import Path
from typing import Any, Dict, List

from pydantic import Field

from app.core.lifespan import lifespan


class ServiceConfig:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.

    Attributes:
        prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å URL –¥–ª—è –≥—Ä—É–ø–ø—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        tags (List[str]): –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

    Example:
        >>> service = ServiceConfig("users", ["Users API"])
        >>> service.to_dict()
        {'prefix': '/users', 'tags': ['Users API']}
    """

    def __init__(self, prefix: str, tags: List[str]):
        """
        Args:
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å URL –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–µ—à–∞
            tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        """
        self.prefix = f"/{prefix}" if prefix else ""
        self.tags = tags

    def to_dict(self) -> Dict[str, Any]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è FastAPI router.

        Returns:
            Dict —Å prefix –∏ tags –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ APIRouter
        """
        return {"prefix": self.prefix, "tags": self.tags}


class PathConfig:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞.

    Attributes:
        ENV_FILE (Path): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        APP_DIR (Path): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        BASE_PATH (Path): –ö–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
        ENV_PATH (Path): –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
        APP_PATH (Path): –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    def __init__(self):
        self.ENV_FILE = Path(".env")
        self.DEV_ENV_FILE = Path(".env.dev")
        self.APP_DIR = Path("app")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if os.getenv("ENV_FILE"):
            self.ENV_PATH = Path(os.getenv("ENV_FILE"))
            env_type = "TEST" if ".env.test" in str(self.ENV_PATH) else "CUSTOM"
        elif self.DEV_ENV_FILE.exists():
            self.ENV_PATH = self.DEV_ENV_FILE
            env_type = "DEV"
        else:
            self.ENV_PATH = self.ENV_FILE
            env_type = "PROD"

        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: {env_type}")
        print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.ENV_PATH}")


class LogConfig:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

    Attributes:
        LEVEL (str): –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        FORMAT (str): –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        FILE (str): –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        MAX_BYTES (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        BACKUP_COUNT (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Ä–æ—Ç–∞—Ü–∏–∏
        ENCODING (str): –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        FILE_MODE (str): –†–µ–∂–∏–º –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
        DATE_FORMAT (str): –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    """

    LEVEL = "DEBUG"
    FORMAT = '\033[1;36m%(asctime)s\033[0m - \033[1;32m%(name)s\033[0m - \033[1;34m%(levelname)s\033[0m - %(message)s'
    FILE = "app.log"
    MAX_BYTES = 10485760  # 10MB
    BACKUP_COUNT = 5
    ENCODING = "utf-8"
    FILE_MODE = "a"
    DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

    def to_dict(self) -> dict:
        return {
            "level": self.LEVEL,
            "format": self.FORMAT,
            "filename": self.FILE,
            "maxBytes": self.MAX_BYTES,
            "backupCount": self.BACKUP_COUNT,
            "encoding": self.ENCODING,
            "filemode": self.FILE_MODE,
            "datefmt": self.DATE_FORMAT,
            "force": True,
        }


class AppConfig:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Attributes:
        TITLE (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        DESCRIPTION (str): –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        VERSION (str): –í–µ—Ä—Å–∏—è API
        HOST (str): –•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        PORT (int): –ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        API_VERSIONS (List[str]): –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏ API
        SERVICES (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        PATHS (PathConfig): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
        LOGGING (LogConfig): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        auth_url (str): URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        redis_url (str): URL –¥–ª—è Redis
        app_params (Dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ FastAPI
        lifespan (Callable): –§—É–Ω–∫—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è


    Example:
        >>> from app.core.config import config
        >>> config.app_params
        {'title': 'Educational Platform', 'description': ... }
    """

    TITLE: str = "Educational Platform"
    DESCRIPTION: str = "Educational Platform  - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è."
    VERSION: str = "0.1.0"
    HOST: str = "0.0.0.0"
    PORT: int = 8000

    API_VERSIONS = ["v1"]  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏ API

    SERVICES = {
        "main": ServiceConfig("", ["Main"]),
        "auth": ServiceConfig("auth", ["Authentication"]),
        "oauth": ServiceConfig("oauth", ["OAuth"]),
        "register": ServiceConfig("register", ["Registration"]),
        "users": ServiceConfig("users", ["Users"]),
        "feedbacks": ServiceConfig("feedbacks", ["Feedbacks"]),
        "videos": ServiceConfig("videos", ["Video Lectures"]),
        "themes": ServiceConfig("themes", ["Themes"]),
        "tests": ServiceConfig("tests", ["Tests"]),
    }

    PATHS = PathConfig()

    LOGGING = LogConfig()

    oauth_success_redirect_uri: str = "https://ebtest.ru"

    auth_url: str = Field(
        default="api/v1/auth", description="URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

    token_type: str = Field(default="bearer", description="–¢–∏–ø —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    token_algorithm: str = Field(
        default="HS256", description="–ê–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞"
    )

    token_expire_minutes: int = Field(
        default=1440, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö"
    )

    redis_pool_size: int = Field(
        default=10, description="–†–∞–∑–º–µ—Ä –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ Redis"
    )

    rabbitmq_connection_timeout: int = Field(
        default=30, description="–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ"
    )
    rabbitmq_exchange: str = Field(
        default="educational_platform", description="–ù–∞–∑–≤–∞–Ω–∏–µ exchange –≤ RabbitMQ"
    )

    @property
    def app_params(self) -> dict:
        """
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        Returns:
            Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ FastAPI
        """
        return {
            "title": self.TITLE,
            "description": self.DESCRIPTION,
            "version": self.VERSION,
            "swagger_ui_parameters": {"defaultModelsExpandDepth": -1},
            "root_path": "",
            "lifespan": lifespan,
        }

    @property
    def uvicorn_params(self) -> dict:
        """
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ uvicorn —Å–µ—Ä–≤–µ—Ä–∞.

        Returns:
            Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ uvicorn
        """
        return {
            "host": self.HOST,
            "port": self.PORT,
            "proxy_headers": True,
            "log_level": "debug",
        }
