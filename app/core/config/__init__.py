"""
–ü–∞–∫–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
—á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç config.

Example:
    >>> from app.core.config import config
    >>> config.database_dsn
    'sqlite+aiosqlite:///./test.db'
    >>> config.docs_access
    True
    >>> config.TITLE
    'Registration Service'

    –ò–ª–∏:
    >>> import app.core.config as config
    >>> config.PORT
    8001
"""

import logging
from functools import lru_cache

from .app import AppConfig, LogConfig
from .settings import Settings

logger = logging.getLogger(__name__)


class Config(Settings, AppConfig):
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ù–∞—Å–ª–µ–¥—É–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Settings –∏ AppConfig.
    """

    def __init__(self, **kwargs):
        Settings.__init__(self, **kwargs)
        AppConfig.__init__(self)
        self.LOGGING = LogConfig(self)
        print("\n‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print(f"üîå DATABASE_DSN: {self.database_dsn}")
        print(f"üîó REDIS_URL: {self.redis_url}")
        print(f"üê∞ RABBITMQ_DSN: {self.rabbitmq_dsn}")
        print(f"üì¶ AWS S3: {self.aws_endpoint}")


@lru_cache
def get_config() -> Config:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞.
    """
    config_instance = Config()

    return config_instance


# def clear_config_cache():
# get_config.cache_clear()
# return get_config()

# config = clear_config_cache()

config = get_config()

logger.info(f"Config loaded: {config}")
__all__ = ["config"]
