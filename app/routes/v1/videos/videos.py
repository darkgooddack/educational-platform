import logging
from fastapi import APIRouter, Depends, Form, UploadFile, File
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.dependencies import get_db_session, get_current_user, get_s3_session
from app.core.dependencies.s3 import S3Session
from app.schemas import VideoLectureResponseSchema, VideoLectureSchema, VideoLectureCreateSchema, UserCredentialsSchema, Page, PaginationParams
from app.services import VideoLectureService

logger = logging.getLogger(__name__)

def setup_routes(router: APIRouter):

    @router.post("/", response_model=VideoLectureResponseSchema)
    async def create_video_lecture(
        title: str = Form(...),
        description: str = Form(...),
        video_file: UploadFile = File(
            ...,
            description="–í–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏",
            content_type=["video/mov", "video/quicktime", "video/mp4", "video/webm", "video/avi"],
            max_size=500_000_000,  # 500MB
        ),
        thumbnail_file: UploadFile = File(
            ...,
            description="–û–±–ª–æ–∂–∫–∞ –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏",
            content_type=["image/jpeg", "image/png", "image/gif"],
            max_size=10_000_000,  # 10MB
        ),
        _current_user: UserCredentialsSchema = Depends(get_current_user),
        db_session: AsyncSession = Depends(get_db_session),
        s3_session: S3Session = Depends(get_s3_session),
    ) -> VideoLectureResponseSchema:
        """
        **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏.**

        **Args**:
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏.
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏.
            video_file (UploadFile): –§–∞–π–ª –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏.
            thumbnail_file (UploadFile): –§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏.
            _current_user (UserCredentialsSchema): –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
            s3_session (S3Session): –°–µ—Å—Å–∏—è S3.

        **Returns**:
            VideoLectureResponseSchema: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤.
        """
        logger.debug("üé• –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–∏")
        logger.debug("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: title='%s', description='%s'", title, description)
        logger.debug("üìÅ –í–∏–¥–µ–æ —Ñ–∞–π–ª –ª–µ–∫—Ü–∏–∏: filename='%s', content_type='%s', size=%d bytes",
                video_file.filename, video_file.content_type, video_file.size)
        logger.debug("üì∑ –û–±–ª–æ–∂–∫–∞: filename='%s', content_type='%s', size=%d bytes")
        logger.debug("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: id=%d, email='%s'",
                _current_user.id, _current_user.email)

        try:
            service = VideoLectureService(db_session, s3_session)
            result = await service.add_video(
                VideoLectureCreateSchema(
                    title=title,
                    description=description,
                    video_file=video_file,
                    thumbnail_file=thumbnail_file,
                ),
                author_id=_current_user.id
            )
            logger.debug("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: %s", result)
            return result

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: %s", str(e))
            raise

    @router.get("/", response_model=Page[VideoLectureSchema])
    async def get_videos(
        pagination: PaginationParams = Depends(),
        theme: str = None,
        search: str = None,
        db_session: AsyncSession = Depends(get_db_session),
    ) -> Page[VideoLectureSchema]:
        """
        **–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º.**

        **Args**:
            - pagination (PaginationParams): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
            - theme (str): –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ
            - search (str): –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
            - db_session (AsyncSession): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
            - sort_by: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (views, updated_at)

        **Returns**:
            - Page[VideoLectureSchema]: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∏–¥–µ–æ –ª–µ–∫—Ü–∏—è–º–∏.
        """
        service = VideoLectureService(db_session)
        videos, total = await service.get_videos(
            pagination=pagination,
            theme=theme,
            search=search,
        )
        return Page(
            items=videos, total=total, page=pagination.page, size=pagination.limit
        )


__all__ = ["setup_routes"]
