"""
–†–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ—É—Ç–µ—Ä—ã:
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –í—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
"""

from fastapi import APIRouter, Depends
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.dependencies import get_db_session, oauth2_schema
from app.schemas import AuthSchema, TokenResponseSchema
from app.services import AuthService


def setup_routes(router: APIRouter):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    Args:
        router (APIRouter): –†–æ—É—Ç–µ—Ä FastAPI

    Routes:
        - POST /auth:
            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω
        - POST /logout:
            –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    """

    @router.post("")
    async def authenticate(
        form_data: OAuth2PasswordRequestForm = Depends(),
        db_session: AsyncSession = Depends(get_db_session),
    ) -> TokenResponseSchema:
        """
        üîê **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username(email) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω.**

        **Args**:
        - **form_data**: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ username –∏ password (OAuth2PasswordRequestForm)

        **Returns**:
        - **TokenResponseSchema**: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —Å access_token –∏ token_type
        """
        return await AuthService(db_session).authenticate(
            AuthSchema(email=form_data.username, password=form_data.password)
        )

    @router.post("/logout")
    async def logout(
        token: str = Depends(oauth2_schema),
        db_session: AsyncSession = Depends(get_db_session),
    ) -> dict:
        """
        üëã **–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.**

        **Args**:
        - **token**: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
        - **redis**: Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫—ç—à–∞

        **Returns**:
        - **dict**: {"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"}
        """
        return await AuthService(db_session).logout(token)


__all__ = ["setup_routes"]
