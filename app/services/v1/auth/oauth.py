import logging
from urllib.parse import urlencode
import secrets
import aiohttp
from fastapi import HTTPException
from fastapi.responses import RedirectResponse

from sqlalchemy.ext.asyncio import AsyncSession

from app.schemas import (
    OAuthUserSchema, 
    TokenSchema, 
    UserSchema, 
    RegistrationSchema
)
from app.core.exceptions import (
    UserNotFoundError, 
    InvalidProviderError, 
    OAuthInvalidGrantError, 
    OAuthTokenError, 
    OAuthConfigError
)
from app.core.config import config
from app.core.security import HashingMixin, TokenMixin
from ..base import BaseService
from .auth import AuthDataManager
from .users import UserService

class OAuthService(HashingMixin, TokenMixin, BaseService):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""

    def __init__(self, session: AsyncSession):
        super().__init__()
        self.providers = config.oauth_providers
        self._user_service = UserService(session)
        self._data_manager = AuthDataManager(session)

    async def authenticate(self, provider: str, code: str) -> TokenSchema:
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

        Args:
            provider: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (vk/google/yandex)
            code: –ö–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Returns:
            –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        token_data = await self._get_provider_token(provider, code)

        self.logger.debug("token_data: %s", token_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await self._get_user_info(provider, token_data)

        self.logger.debug("user_data: %s", user_data)

        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        created_user = await self._get_or_create_user(provider, user_data)

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.logger.debug("created_user: %s", created_user)
           
        return created_user

    async def _get_or_create_user(self, provider: str, user_data: dict) -> TokenSchema:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä.

        Args:
            provider: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (vk/google/yandex)
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Returns:
            TokenSchema —Å access_token

        NOTE:
            –ü—Ä–∏–º–µ—Ä user_data –æ—Ç yandex:
            {
                'id': '2<...>6', 
                'login': 't<...>l', 
                'client_id': '90d25ee61c06<...>2a70ecf5865', 
                'default_email': '<...>l@yandex.ru', - –ø–æ–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤ —Å–ª—É—á–∞–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –¥–µ–ª–∞–µ–º –ø–æ-–¥—Ä—É–≥–æ–º—É
                'emails': ['<...>l@yandex.ru'], # - –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ emails –Ω–µ—Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫
                'psuid': '1.AA0ZzA.BuDewI5<...>oB-Zgkebg5Wo77OLhsw'
            }
        TODO: 
            –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏ –æ—Ç google –∏ –æ—Ç vk –∏ –∑–∞–Ω–µ—Å—Ç–∏ –≤ email_field_mapping
        """
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ provider_id
        provider_field = f"{provider}_id"
        provider_id = int(user_data["id"])

        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π email –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        email_field_mapping = {
            'yandex': 'default_email',
            'google': 'email',
            'vk': 'email'
        }
        user_email = user_data[email_field_mapping.get(provider, 'default_email')]
        
        try:
            self.logger.debug(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {provider_field}: {provider_id}")
            # –ü–æ–∏—Å–∫ –ø–æ provider_id
            return await self._user_service.get_by_field(provider_field, provider_id)
        except UserNotFoundError:
            self.logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ provider_id, –ø—Ä–æ–±—É–µ–º –ø–æ email...")
        try:
            # –ü–æ–∏—Å–∫ –ø–æ email
            return await self._user_service.get_by_email(user_email)
        except UserNotFoundError:
            self.logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ email, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        oauth_user = OAuthUserSchema(
            email=user_email,
            first_name=user_data.get("first_name", ""),
            last_name=user_data.get("last_name", ""),
            middle_name=user_data.get("middle_name", None),
            phone=user_data.get("phone", None),
            password=secrets.token_hex(16),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
            **{provider_field: provider_id}  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        )
        self.logger.debug(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: {user_email}")
        oauth_user_dict = oauth_user.model_dump()
        registration_data = RegistrationSchema(**oauth_user_dict)
        created_user = await self._user_service.create_oauth_user(registration_data)
        self.logger.debug(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞—á–Ω–æ —Å–æ–∑–¥–∞–Ω —Å id: {created_user.id}")
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
        display_name = created_user.first_name or f"User_{created_user.id}"
        # –°–æ–∑–¥–∞–µ–º UserSchema –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        user_schema = UserSchema(
            id=created_user.id,
            name=display_name,
            email=created_user.email,
            hashed_password=created_user.hashed_password
        )
        self.logger.debug("üîë –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        # –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω
        return await self.create_token(user_schema)

    
    async def get_oauth_url(self, provider: str) -> RedirectResponse:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        Args:
            provider: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (vk/google/yandex)

        Returns:
            URL –¥–ª—è OAuth2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        if provider not in self.providers:
            raise InvalidProviderError(provider)

        provider_config = self.providers[provider]
        self._validate_provider_config(provider, provider_config)
        auth_url = self._build_auth_url(provider, provider_config)

        return RedirectResponse(auth_url)

    def _validate_provider_config(self, provider: str, provider_config: dict) -> None:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π.

        Args:
            provider_config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Raises:
            HTTPException: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        """
        required_fields = ["client_id", "client_secret"]
        missing = [field for field in required_fields if field not in provider_config]
        if missing:
            raise OAuthConfigError(provider, missing)

    def _build_auth_url(self, provider: str, _config: dict) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

        Args:
            provider (str): –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Returns:
            str: URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        params = {
            "client_id": _config["client_id"],
            "redirect_uri": f"{config.app_url}/api/v1/oauth/{provider}/callback",
            "scope": _config.get("scope", ""),
            "response_type": "code",
        }
        return f"{_config['auth_url']}?{urlencode(params)}"



    # –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    async def _get_provider_token(self, provider: str, code: str) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.

        Args:
            provider (str): –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            code (str): –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        """
        provider_config = self.providers[provider]

        token_params = {
            "client_id": provider_config["client_id"],
            "client_secret": provider_config["client_secret"],
            "code": code,
            "redirect_uri": f"{config.app_url}/{config.oauth_url}/{provider}/callback",
            "grant_type": "authorization_code",
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                provider_config["token_url"],
                data=token_params
            ) as resp:
                token_data = await resp.json()
                if "error" in token_data and token_data["error"] == "invalid_grant":
                    raise OAuthInvalidGrantError(provider)
                elif "error" in token_data:
                    raise OAuthTokenError(provider, token_data["error"])
                return token_data

    async def _get_user_info(self, provider: str, token_data: dict) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.

        Args:
            provider (str): –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            token_data (dict): –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        provider_config = self.providers[provider]

        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {token_data['access_token']}"
            }
            async with session.get(
                provider_config["user_info_url"],
                headers=headers
            ) as resp:
                user_data = await resp.json()

        return user_data
