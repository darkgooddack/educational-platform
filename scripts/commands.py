import subprocess
from pathlib import Path
from typing import Optional
import time
import socket
import uvicorn

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).parents[1]
COMPOSE_FILE_FULL = "docker-compose.dev.full.yml"
COMPOSE_FILE_WITHOUT_BACKEND = "docker-compose.dev.yml"
def run_compose_command(command: str | list, compose_file: str = COMPOSE_FILE_FULL) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç docker-compose –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    if isinstance(command, str):
        command = command.split()

    subprocess.run(
        ["docker-compose", "-f", compose_file] + command,
        cwd=ROOT_DIR,
        check=True
    )

def infra_up():
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –≤—Å—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    run_compose_command(["up", "-d"])

def infra_down():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    run_compose_command("down")

def infra_build():
    """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    run_compose_command("build")

def infra_logs():
    """–°–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏"""
    run_compose_command("logs -f")

def infra_restart():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã"""
    run_compose_command("restart")

def infra_nuke():
    """–°–Ω–æ—Å–∏–º –Ω–∞—Ö—Ä–µ–Ω –≤—Å—ë –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –∑–∞–Ω–æ–≤–æ"""
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    run_compose_command(["down", "--volumes", "--remove-orphans", "--rmi", "all"])

    # –ß–∏—Å—Ç–∏–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
    subprocess.run(["docker", "volume", "prune", "-f"], check=True)

    # –ß–∏—Å—Ç–∏–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ images
    subprocess.run(["docker", "image", "prune", "-af"], check=True)

    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω–æ–≤–æ
    run_compose_command("build --no-cache")

    # –ü–æ–¥–Ω–∏–º–∞–µ–º
    run_compose_command(["up", "-d"])

def find_free_port(start_port: int = 8000) -> int:
    """–ò—â–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
    port = start_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤! –ê—Ö—É–µ—Ç—å!")

def check_rabbitmq():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RabbitMQ"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    for _ in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫
        try:
            sock.connect(('localhost', 5672))
            sock.close()
            return True
        except:
            print("‚è≥ –ñ–¥—ë–º RabbitMQ...")
            subprocess.run(["net", "start", "RabbitMQ"])
            time.sleep(2)
    return False

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    for _ in range(5):
        try:
            sock.connect(('localhost', 6380))
            sock.close()
            return True
        except:
            print("‚è≥ –ñ–¥—ë–º Redis...")
            time.sleep(2)
    return False

def check_postgres():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    for _ in range(5):
        try:
            sock.connect(('localhost', 5434))
            sock.close()
            return True
        except:
            print("‚è≥ –ñ–¥—ë–º PostgreSQL...")
            time.sleep(2)
    return False

def start_infrastructure(port: Optional[int] = 8000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ Redis –∏ RabbitMQ"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    run_compose_command(["up", "-d", "redis", "rabbitmq", "postgres"], COMPOSE_FILE_WITHOUT_BACKEND)

    # –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    if not check_redis():
        print("‚ùå Redis –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        return False

    if not check_rabbitmq():
        print("‚ùå RabbitMQ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        return False

    if not check_postgres():
        print("‚ùå PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        return False

    print("\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
    print(f"üìä FastAPI Swagger:    http://localhost:{port}/docs")
    print(f"üê∞ RabbitMQ UI:       http://localhost:15672")
    print(f"üóÑÔ∏è PostgreSQL:        localhost:5434")
    print(f"üì¶ Redis:             localhost:6380\n")

    print("‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞!")
    return True

def dev(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """
    # if not check_rabbitmq():
    #     print("üî¥ RabbitMQ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:")
    #     print("net start RabbitMQ")
    #     return

    # print("üü¢ RabbitMQ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not start_infrastructure():
        return

    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=port,
        reload=True
    )

def serve(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç uvicorn —Å–µ—Ä–≤–µ—Ä

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """
    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    subprocess.run([
        "uvicorn",
        "app.main:app",
        "--host", "0.0.0.0",
        "--port", "8000",
        "--proxy-headers",
        "--forwarded-allow-ips=*"
    ], check=True)

def migrate():
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π.
    """
    subprocess.run(["alembic", "upgrade", "head"], check=True)

def rollback():
    """
    –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π.
    """
    subprocess.run(["alembic", "downgrade", "head"], check=True)

def create_migration(name: str):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.
    """
    subprocess.run(["alembic", "revision", "--autogenerate", "-m", name], check=True)

def lint():
    """
    –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞.
    """
    subprocess.run(["black", "app/"], check=True)
    subprocess.run(["isort", "app/"], check=True)
    subprocess.run(["flake8", "app/"], check=True)
    subprocess.run(["mypy", "app/"], check=True)

def format():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
    """
    subprocess.run(["black", "app/"], check=True)
    subprocess.run(["isort", "app/"], check=True)

def check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞.
    """
    subprocess.run(["flake8", "app/"], check=True)
    subprocess.run(["mypy", "app/"], check=True)

def test():
    """
    –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
    """
    try:
        subprocess.run(["pytest", "tests/", "-v"], check=True)
    except subprocess.CalledProcessError:
        pass

def start_all():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–µ—Ä"""
    migrate()
    serve()
