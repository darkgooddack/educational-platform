"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ RabbitMQ.
"""

import json
import logging
import time
from typing import Optional

from aio_pika import Channel, Message
from tenacity import retry, stop_after_attempt, wait_exponential


class MessageProducer:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ RabbitMQ.

    Attributes:
        channel (Channel): –ö–∞–Ω–∞–ª RabbitMQ –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    """

    def __init__(self, channel: Channel) -> None:
        self.channel = channel
        self.MESSAGE_EXPIRATION = 60000  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∂–∏–∑–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è
        self.RESPONSE_TIMEOUT = 30  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        self.logger = logging.getLogger(__name__)

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=4, max=10),
        before_sleep=lambda retry_state: logging.warning(
            "üîÑ –ü–æ–ø—ã—Ç–∫–∞ %d –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥...",
            retry_state.attempt_number,
            retry_state.next_action.sleep,
        ),
    )
    async def send_and_wait(
        self, routing_key: str, message: dict
    ) -> tuple[dict, Optional[str]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç.

        Args:
            routing_key: –ö–ª—é—á –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        Returns:
            dict: –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ {'error': 'Timeout'} –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ

        Note:
            –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 30 —Å–µ–∫—É–Ω–¥


        """
        start_time = time.time()

        queue = await self.channel.declare_queue("", exclusive=True)

        self.logger.debug(
            "üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å %s: %s", routing_key, message
        )

        await self.channel.default_exchange.publish(
            Message(
                body=json.dumps(message).encode(),
                reply_to=queue.name,
                expiration=self.MESSAGE_EXPIRATION,
            ),
            routing_key=routing_key,
        )

        try:
            self.logger.debug("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ %s", queue.name)
            async with queue.iterator(timeout=self.RESPONSE_TIMEOUT) as queue_iter:
                async for message in queue_iter:
                    async with message.process():
                        response = json.loads(message.body.decode())
                        self.logger.debug(
                            "‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:\n"
                            "‚îú‚îÄ –°—Ç–∞—Ç—É—Å: %s\n"
                            "‚îú‚îÄ –î–∞–Ω–Ω—ã–µ: %s\n"
                            "‚îî‚îÄ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %sms",
                            response.get("status", "OK"),
                            json.dumps(response, indent=2, ensure_ascii=False),
                            round((time.time() - start_time) * 1000),
                        )
                        return response, None

        except TimeoutError:
            self.logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ %s", queue.name)
            return {"error": "Timeout"}, "timeout"

        except ConnectionError:
            self.logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ")
            return {"error": "Connection failed"}, "connection"

        except Exception as e:
            self.logger.error("üíÄ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %s", str(e))
            return {"error": str(e)}, "unknown"
