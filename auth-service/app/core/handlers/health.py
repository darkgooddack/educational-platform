"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.

–§—É–Ω–∫—Ü–∏—è handle_health_check –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞,
–ø—Ä–æ–≤–µ—Ä—è—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ,
—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç "healthy". –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏,
–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç "unhealthy" —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
"""

import logging

from aio_pika import IncomingMessage
from sqlalchemy import text
from sqlalchemy.exc import DBAPIError, SQLAlchemyError
from sqlalchemy.exc import TimeoutError as SQLATimeoutError

from app.core.dependencies.database import SessionContextManager

from .utils import send_response

logger = logging.getLogger(__name__)


async def handle_health_check(message: IncomingMessage) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns: None
    """
    try:
        async with SessionContextManager() as session_manager:

            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ë–î...")
            await session_manager.session.execute(text("SELECT 1"))

            logger.info("‚úÖ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é healthy")
            await send_response(message, {"status": "healthy"})

    except SQLATimeoutError as e:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %s", str(e))
        await send_response(message, {"status": "unhealthy", "error": "timeout"})

    except DBAPIError as e:
        logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %s", str(e))
        await send_response(message, {"status": "unhealthy", "error": "connection"})

    except SQLAlchemyError as e:
        logger.error("üíÄ –û—à–∏–±–∫–∞ SQLAlchemy: %s", str(e))
        await send_response(message, {"status": "unhealthy", "error": "database"})

    except Exception as e:
        logger.error("üö® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %s", str(e))
        await send_response(message, {"status": "unhealthy", "error": "unknown"})
