import json
import logging

from aio_pika import IncomingMessage, Message, RobustConnection, connect_robust

from app.core.config import config

logger = logging.getLogger(__name__)


async def send_response(message: IncomingMessage, status: dict) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply_to
        status: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è

    Returns: None
    """
    try:
        logger.debug(
            "üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å %s: %s",
            message.reply_to,
            json.dumps(status, indent=2),
        )

        connection: RobustConnection = await connect_robust(**config.rabbitmq_params)
        async with connection:
            channel = await connection.channel()
            await channel.default_exchange.publish(
                Message(
                    body=json.dumps(status).encode(), content_type="application/json"
                ),
                routing_key=message.reply_to,
            )
        logger.debug("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except ConnectionError as e:
        logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: %s", str(e))
    except TimeoutError as e:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e))
    except Exception as e:
        logger.error("üíÄ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", str(e))
