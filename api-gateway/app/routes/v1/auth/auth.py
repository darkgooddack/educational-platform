"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è:
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –í—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

TODO:
- –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Pydantic –º–æ–¥–µ–ª–∏
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫—ç—à–µ–º
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –ª–æ–≥–∞—É—Ç–µ
- –í—ã–Ω–æ—Å —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞
"""

from aio_pika import Connection
from fastapi import APIRouter, Depends

from app.core.dependencies import get_rabbitmq, get_redis
from app.schemas import AuthSchema, TokenSchema
from app.services.v1.auth import AuthService

auth_service = AuthService()


def setup_routes(router: APIRouter):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    Args:
        router (APIRouter): –†–æ—É—Ç–µ—Ä FastAPI

    Routes:
        - POST /auth:
            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - POST /logout:
            –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    """

    @router.post("")
    async def authenticate(
        credentials: AuthSchema,
        redis=Depends(get_redis),
        rabbitmq: Connection = Depends(get_rabbitmq),
    ) -> TokenSchema:
        """
        üîê **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω.**

        **Args**:
        - **credentials**: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (AuthSchema)
        - **redis**: Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        - **rabbitmq**: RabbitMQ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å auth_service

        **Returns**:
        - **TokenSchema**: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —Å access_token –∏ token_type

        **Raises**:
        - **UserNotFoundError**: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return await auth_service.authenticate(credentials, redis, rabbitmq)

    @router.post("/logout")
    async def logout(
        token: str,
        redis=Depends(get_redis),
        rabbitmq: Connection = Depends(get_rabbitmq),
    ) -> dict:
        """
        üëã **–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.**
        
        **Args**:
        - **token**: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
        - **redis**: Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫—ç—à–∞  
        - **rabbitmq**: RabbitMQ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å auth_service

        **Returns**:
        - **dict**: {"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"}
        """
        return await auth_service.logout(token, redis, rabbitmq)


__all__ = ["setup_routes"]
